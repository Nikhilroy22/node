<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Live Odds - BetSlip Modal</title>
  <style>
    body { background:#111; color:#fff; font-family:sans-serif; padding:20px; }
    .match { background:#222; padding:10px; margin:10px 0; border-radius:8px; }
    .team { display:flex; justify-content:space-between; margin:5px 0; flex-wrap:wrap; gap:5px; }
    .btn { background:#007bff; color:#fff; border:none; border-radius:5px; padding:5px 10px; cursor:pointer; transition:0.3s; }
    .btn:hover { background:#0056b3; }
    .blink { animation: blink 1s linear; }
    @keyframes blink { from{background:yellow;color:black;} to{background:#007bff;color:white;} }
    .modal { display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.7); justify-content:center; align-items:center; }
    .modal-content { background:#222; padding:20px; border-radius:10px; text-align:center; width:300px; }
    .close { float:right; cursor:pointer; color:red; }
    
    
    #toastContainer {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.toast {
  min-width: 220px;
  background: #222;
  color: #fff;
  padding: 12px 18px;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
  opacity: 0;
  transform: translateX(100%);
  animation: slideIn 0.3s forwards, fadeOut 0.5s ease-in 4.5s forwards;
  font-family: 'Poppins', sans-serif;
}

.toast.success { border-left: 5px solid #22c55e; }   /* Green */
.toast.error { border-left: 5px solid #ef4444; }     /* Red */
.toast.info { border-left: 5px solid #3b82f6; }      /* Blue */
.toast.warning { border-left: 5px solid #f59e0b; }   /* Yellow */

@keyframes slideIn {
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeOut {
  to {
    opacity: 0;
    transform: translateX(100%);
  }
}
  </style>
</head>
<body>
  <!-- Toast Container -->
<div id="toastContainer"></div>
  
  <h2>‚ö° Live Odds (1xBet Style)</h2>
  <div id="matches">Loading...</div>

  <!-- Bet Slip Modal -->
  <div class="modal" id="betModal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h3 id="matchTitle"></h3>
      <p>Option: <b id="teamName"></b></p>
      <p>Odds: <span id="teamOdds"></span></p>

      <div style="margin:10px 0;">
        <label for="betAmount">Bet Amount:</label><br>
        <input type="number" id="betAmount" placeholder="Enter amount"
          style="width:100%;padding:8px;margin-top:5px;border-radius:5px;border:1px solid #555;background:#111;color:#fff;" />
      </div>

      <button class="btn" onclick="placeBet()">Place Bet</button>
    </div>
  </div>

  <script src="/js/eruda.js"></script>
  <script>
    eruda.init(); // Console ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶¨‡ßá
  </script>
  <script>
  let liveMatches = {};
  let selectedBet = null;
  let pollTimer = null;

  async function fetchOdds() {
    try {
      const res = await fetch("/res");
      const data = await res.json();
      const matches = data?.Value || [];
      const container = document.getElementById("matches");
      container.innerHTML = "";

      matches.forEach(m => {
        const id = m.I;
        const teamA = m.O1E;
        const teamB = m.O2E;
        const oddsA = m.E?.[0]?.C || 1.0;
        const oddsB = m.E?.[1]?.C || 1.0;

        // Nested AE-ME odds ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π
        const nestedOdds = [];
        m.AE?.forEach(j => {
          j.ME?.forEach(k => {
            if (k.CE === 1) {
              
              // testtype determine
    const testtype = k.T === 9 ? `Total over ${k.P}` 
                   : k.T === 10 ? `Total under ${k.P}`
                   : k.T;
              
              nestedOdds.push({
                nametest: testtype,
                name: k.T || "Extra Option",
                odds: k.C,
                key: `${id}_${k.CE}_${k.T || "x"}`
              });
            }
          });
        });

        // Data store
        liveMatches[id] = { teamA, teamB, oddsA, oddsB, nestedOdds };

        // HTML build
        const div = document.createElement("div");
        div.className = "match";
        div.innerHTML = `
          <h4>${teamA} vs ${teamB}</h4>
          <div class="team">
            <span>${teamA}</span>
            <button class="btn" onclick="openModal('${id}','A','${teamA}',${oddsA})">${oddsA}</button>
          </div>
          <div class="team">
            <span>${teamB}</span>
            <button class="btn" onclick="openModal('${id}','B','${teamB}',${oddsB})">${oddsB}</button>
          </div>

          ${nestedOdds.length ? `
            <div class="team" style="margin-top:10px;">
              ${nestedOdds.map(o => 
                `<button class="btn" id="${o.key}" onclick="openModal('${id}','X','${o.key}',${o.odds})">${o.nametest} - ${o.odds}</button>`
              ).join("")}
            </div>
          ` : ""}
        `;
        container.appendChild(div);
      });

      updateModalOdds();
    } catch (err) {
      console.error("Fetch error net pblm:", err);
    }

    clearTimeout(pollTimer);
    pollTimer = setTimeout(fetchOdds, 3000); // ‡ß© ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂
  }

  // üßæ Modal
  function openModal(matchId, team, name, odds) {
    selectedBet = { matchId, team, name, odds };
    const match = liveMatches[matchId];
    document.getElementById("matchTitle").innerText = `${match.teamA} vs ${match.teamB}`;
    document.getElementById("teamName").innerText = name;
    document.getElementById("teamOdds").innerText = odds;
    document.getElementById("betModal").style.display = "flex";
  }

  function closeModal() {
    document.getElementById("betModal").style.display = "none";
    selectedBet = null;
    document.getElementById("betAmount").value = "";
  }

  // üîÅ Odds update (real-time)
  function updateModalOdds() {
    if (!selectedBet) return;
    const match = liveMatches[selectedBet.matchId];
    if (!match) return;

    const el = document.getElementById("teamOdds");
    let newOdds = selectedBet.odds;

    if (selectedBet.team === "A") newOdds = match.oddsA;
    else if (selectedBet.team === "B") newOdds = match.oddsB;
    else {
      const opt = match.nestedOdds.find(o => o.key === selectedBet.name);
      if (opt) newOdds = opt.odds;
      //console.log(opt);
    }

    if (parseFloat(el.innerText) !== newOdds) {
      el.innerText = newOdds;
      el.classList.add("blink");
      setTimeout(() => el.classList.remove("blink"), 1000);
    }
  }

  // üí∞ Bet place (demo)
  async function placeBet() {
  if (!selectedBet) return alert("No option selected!");
  const amount = parseFloat(document.getElementById("betAmount").value);
  if (!amount || amount <= 0) return showToast('Please enter valid amount!', 'error'); //alert("Please enter valid amount!");

  try {
    const res = await fetch("/bet", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        matchId: selectedBet.matchId,
        team: selectedBet.team,
        label: selectedBet.team,
        amount,
        odds: selectedBet.odds
      })
    });

//console.log(selectedBet.matchId);
    const data = await res.json();
    if (data.success) {
      showToast(`‚úÖ Bet Placed!\n${selectedBet.team} @ ${selectedBet.odds}`, 'success');
      //alert(`‚úÖ Bet Placed!\n${selectedBet.team} @ ${selectedBet.odds}`);
      //console.log("SuccessFull Bet")
      closeModal();
    } else {
      alert(data.message || "Failed to place bet!");
    }
  } catch (err) {
    console.error("Bet error:", err);
  }
}


function showToast(message, type = 'info') {
  const container = document.getElementById('toastContainer');
  const toast = document.createElement('div');
  toast.className = `toast ${type}`;
  toast.textContent = message;
  
  container.appendChild(toast);

  // Auto remove after 5s
  setTimeout(() => {
    toast.remove();
  }, 25000);
}



  fetchOdds();
  </script>
</body>
</html>